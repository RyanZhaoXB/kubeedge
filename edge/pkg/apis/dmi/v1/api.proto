/*
Copyright 2022 The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// To regenerate api.pb.go run hack/generate-dmi.sh
syntax = "proto3";

//option go_package = "path;name";
option go_package="./;v1";
package v1;

import "google/protobuf/any.proto";

// DeviceManagerService defines the public APIS for remote device management.
// The server is implemented by the module of device manager in edgecore
// and the client is implemented by the device mapper for upstreaming.
service DeviceManagerService {
    // MapperRegister register the information of the mapper to device manager
    rpc MapperRegister(MapperRegisterRequest) returns (MapperRegisterResponse) {}
    // ReportDeviceStatus report the status of devices to device manager
    rpc ReportDeviceStatus(ReportDeviceStatusRequest) returns (ReportDeviceStatusResponse) {}
}

// DeviceMapperService defines the public APIS for remote device management.
// The server is implemented by the device mapper
// and the client is implemented by the module of device manager in edgecore for downstreaming.
service DeviceMapperService {
    // CreateDevice create a device to the device mapper
    rpc CreateDevice(CreateDeviceRequest) returns (CreateDeviceResponse) {}
    // RemoveDevice remove a device to the device mapper
    rpc RemoveDevice(RemoveDeviceRequest) returns (RemoveDeviceResponse) {}
    // UpdateDevice update a device to the device mapper
    rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse) {}
    // CreateDeviceModel create a device model to the device mapper
    rpc CreateDeviceModel(CreateDeviceModelRequest) returns (CreateDeviceModelResponse) {}
    // RemoveDeviceModel remove a device model to the device mapper
    rpc RemoveDeviceModel(RemoveDeviceModelRequest) returns (RemoveDeviceModelResponse) {}
    // UpdateDeviceModel update a device model to the device mapper
    rpc UpdateDeviceModel(UpdateDeviceModelRequest) returns (UpdateDeviceModelResponse) {}
    // UpdateDeviceStatus update a device status to the device mapper
    rpc UpdateDeviceStatus(UpdateDeviceStatusRequest) returns (UpdateDeviceStatusResponse) {}
    // GetDevice get the information of a device from the device mapper
    rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse) {}
}

message MapperRegisterRequest {
  // true means device manager should return the device list in the response
  bool withData = 1;
  MapperInfo mapper = 2;
}

message MapperRegisterResponse {
    repeated DeviceModel modelList = 1;
    repeated Device deviceList = 2;
}

message DeviceModel {
    string name = 1;
    DeviceModelSpec spec = 2;
}

message DeviceModelSpec {
    repeated DeviceProperty properties = 1;
    repeated DeviceCommand commands = 2;
    string protocol = 3;
}

message DeviceProperty {
    string name = 1;
    string description = 2;
    PropertyType type = 3;
}

message PropertyType {
    PropertyTypeInt64 int = 1;
    PropertyTypeString string = 2;
    PropertyTypeDouble double = 3;
    PropertyTypeFloat float = 4;
    PropertyTypeBoolean boolean = 5;
    PropertyTypeBytes bytes = 6;
}

message PropertyTypeInt64 {
    string accessMode = 1;
    int64 defaultValue =2;
    int64 minimum =3;
    int64 maximum = 4;
    string unit = 5;
}

message PropertyTypeString {
    string accessMode = 1;
    string defaultValue = 2;
}

message PropertyTypeDouble {
    string accessMode = 1;
    double defaultValue = 2;
    double minimum = 3;
    double maximum = 4;
    string unit = 5;
}

message PropertyTypeFloat {
    string accessMode = 1;
    float defaultValue = 2;
    float minimum = 3;
    float maximum = 4;
    string unit = 5;
}

message PropertyTypeBoolean {
    string accessMode = 1;
    bool defaultValue = 2;
}

message PropertyTypeBytes {
    string accessMode = 1;
}

message DeviceCommand {
    string name = 1;
    string url = 2;
    string method = 3;
    repeated string status_code = 4;
    repeated string parameters = 5;
    bytes response = 6;
}

message Device {
    string name = 1;
    DeviceSpec spec = 2;
    DeviceStatus status = 3;
}

message DeviceSpec {
    string deviceModelReference = 1;
    ProtocolConfig protocol = 2;
    repeated DevicePropertyVisitor propertyVisitors = 3;
}

message ProtocolConfig {
    ProtocolConfigOpcUA opcua = 1;
    ProtocolConfigModbus modbus = 2;
    ProtocolConfigBluetooth bluetooth = 3;
    ProtocolConfigCommon common = 4;
    ProtocolConfigCustomized customizedProtocol = 5;
}

message ProtocolConfigOpcUA {
    string url = 1;
    string userName = 2;
    string password = 3;
    string securityPolicy = 4;
    string securityMode = 5;
    string certificate = 6;
    string privateKey = 7;
    int64 timeout = 8;
}

message ProtocolConfigModbus {
    int64 slaveID = 1;
}

message ProtocolConfigBluetooth {
    string macAddress = 1;
}

message ProtocolConfigCommon {
    ProtocolConfigCOM com = 1;
    ProtocolConfigTCP tcp = 2;
    string commType = 3;
    int64 reconnTimeout = 4;
    int64 reconnRetryTimes = 5;
    int64 collectTimeout = 6;
    int64 collectRetryTimes = 7;
    string collectType = 8;
    CustomizedValue customizedValues = 9;
}

message ProtocolConfigCOM {
    string serialPort = 1;
    int64 baudRate = 2;
    int64 dataBits= 3;
    string parity = 4;
    int64 stopBits = 5;
}

message ProtocolConfigTCP {
    string ip = 1;
    int64 port = 2;
}

message CustomizedValue {
    map<string, google.protobuf.Any> data = 1;
}

message ProtocolConfigCustomized {
    string protocolName = 1;
    CustomizedValue configData = 2;
}

message DevicePropertyVisitor {
    string propertyName = 1;
    int64 reportCycle = 2;
    int64 collectCycle = 3;
    CustomizedValue customizedValues = 4;
    VisitorConfigOPCUA opcua = 5;
    VisitorConfigModbus modbus = 6;
    VisitorConfigBluetooth bluetooth = 7;
    VisitorConfigCustomized customizedProtocol = 8;
}

message VisitorConfigOPCUA {
    string nodeID = 1;
    string browseName = 2;
}

message VisitorConfigModbus {
    string register =1;
    int64 offset = 2;
    int64 limit = 3;
    double scale = 4;
    bool isSwap = 5;
    bool isRegisterSwap = 6;
}

message VisitorConfigBluetooth {
    string characteristicUUID = 1;
    map<string, bytes> dataWrite = 2;
    BluetoothReadConverter dataConverter =3;
}

message BluetoothReadConverter {
    int64 startIndex = 1;
    int64 endIndex = 2;
    uint64 shiftLeft = 3;
    uint64 shiftRight = 4;
    repeated BluetoothOperations orderOfOperations =5;
}

message BluetoothOperations {
    string operationType = 1;
    double operationValue = 2;
}

message VisitorConfigCustomized {
    string protocolName = 1;
    CustomizedValue configData =2;
}

message MapperInfo {
  string name = 1;
  string version = 2;
  string api_version = 3;
  string protocol = 4;
  bytes address = 5;
  string state = 6;
}

message ReportDeviceStatusRequest {
    string deviceName = 1;
    DeviceStatus reportedDevice = 2;
}

message DeviceStatus {
    repeated Twin twins = 1;
    string state = 2;
}

message Twin {
    string propertyName = 1;
    TwinProperty desired = 2;
    TwinProperty reported = 3;
}

message TwinProperty {
    string value = 1;
    map<string,string> metadata = 2;
}

message ReportDeviceStatusResponse {}

message CreateDeviceRequest {
  Device device = 1;
}

message CreateDeviceResponse {
    string deviceName = 1;
}

message CreateDeviceModelRequest {
  DeviceModel model = 1;
}

message CreateDeviceModelResponse {
    string deviceModelName = 1;
}

message RemoveDeviceRequest {
    string deviceName =1;
}

message RemoveDeviceResponse {}

message RemoveDeviceModelRequest {
    string modelName =1;
}

message RemoveDeviceModelResponse {}

message UpdateDeviceRequest {
    Device device = 1;
}

message UpdateDeviceResponse {}

message UpdateDeviceModelRequest {
    DeviceModel model = 1;
}

message UpdateDeviceModelResponse {}

message UpdateDeviceStatusRequest {
    string deviceName = 1;
    DeviceStatus desiredDevice = 2;
}

message UpdateDeviceStatusResponse {}

message GetDeviceRequest {
    string deviceName = 1;
}

message GetDeviceResponse {
    Device device = 1;
}
